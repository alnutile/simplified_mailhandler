<?php
/**
 * @file
 * Simplied system to check emails and make Tasks and Comments.
 */
$path = drupal_get_path('module', 'simplified_mailhandler');

//Set define via external file
//keep it out of db and easier to go dev/live
if(file_exists($path . '/inc/simplified_mailhandler_helpers.inc')) {
  require_once($path . '/settings.php');
}
require_once($path . '/inc/simplified_mailhandler_helpers.inc');
/**
 * Implementation of hook_menu().
 */
function simplified_mailhandler_menu() {

  $items['simplified_mailhandler/testarea'] = array(
    'title' => 'TestArea',
    'page callback' => 'simplified_mailhandler_testarea',
    'access callback' => TRUE,
  );
  
  $items['admin/config/simplified_mailhandler'] = array(
    'title' => 'Misc Settings',
    'page callback' => 'simplified_mailhandler_admin',
    'access callback' => TRUE,
    'file' => 'inc/simplified_mailhandler_admin.inc',
  );

   $items['simplified_mailhandler/cron'] = array(
    'title' => 'Cron Only',
    'page callback' => 'simplified_mailhandler_cron_custom',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
     
  return $items;
}


function simplified_mailhandler_testarea() {
  $output = 'test here';

    $node = node_load(273);
    //See if date is more than 30 days old
    $nodeCreated = new DateTime('2013-01-01');
    $now = new DateTime("now");
    $dateDiff = $nodeCreated->diff($now);
    $test = print_r($dateDiff, 1);
    drupal_set_message("Created $dateDiff->days");
	SimplifiedMailHandlerProcessor();
  return $output;
}

/**
 * There is a custom cron to run this every minute
 */
function simplified_mailhandler_cron_custom() {
  SimplifiedMailHandlerProcessor();
}


function simplified_mailhandler_theme() {
	return array(
		'simplified_mailhandler_email_client' => array(
			'variables' => array( 'params' => NULL,),
			'template' => 'templates/simplified_mailhandler_email_client'
		),
		'simplified_mailhandler_email_staff' => array(
			'variables' => array( 'params' => NULL,),
			'template' => 'templates/simplified_mailhandler_email_staff'
		),
	);
}


/**
 * A simple form that displays a textfield and submit button.
 *
 * This form will be rendered by theme('form') (theme_form() by default)
 * because we do not provide a theme function for it here.
 */
function template_preprocess_simplified_mailhandler_email_staff(&$variables) {
	watchdog('test template', print_r($variables, 1));
	//Build email $variables['entity_id']
	//use $variables['type'] to help make the token
	//Get Body
	//Create Post/Comment Filters
	$id = $variables['entity_id'];
	$type = $variables['type'];
	$token = "[{$type}_id:{$id}]";
	$files = '';
	$variables['params']['header'] = '';

	//body
	if($type == 'post') {
    $title = sm_get_node_title($id);
		$body = sm_get_node_body_html($id);
		$files = sm_get_files_html($id);
		$staffLink = l('Task Link', $GLOBALS['base_url'] . '/node/' . $id);
	} else {
    $title = sm_get_comment_title($id);
		$body = sm_get_cid_body_html($id);
		$files = sm_get_cid_files($id);
		//Need the node id not just the comment id
		$nodeNid = sm_get_nid_from_cid($id);
		//$staffLink = l('Task Link', $GLOBALS['base_url'] . '/node/' . $nodeNid);//, array('fragment' => 'comment-'.$id));
		$href = $GLOBALS['base_url'] . '/node/' . $nodeNid . '#comment-' . $id;
		$staffLink = "<a href=\"$href\">Task Link</a>";
		//$staffLink = sm_get_site_link_from_comment($id);
	}
	$variables['params']['title'] = "#{$id} {$title}";
	$variables['params']['body'] = $body;
	$variables['params']['files'] = $files;
	$variables['params']['footer'] = $token;
	$variables['params']['staff_link'] = $staffLink;

}

/**
 * Set the node types list to 
 * allow the user to choose
 * which one to create
 */
function simplified_mailhandler_form_alter(&$form, $form_state, $form_id) {

  if($form['#form_id'] == 'task_node_form') {
    global $user;
    //What staff to send this too
    //@todo make the list grouped eg Staff, Client Company/Group etc
    //See if this is already settings
    if(isset($form['nid']['#value'])) {
      $nid = $form['nid']['#value'];
      $node = node_load($nid);
      //Get Existing users to be notified
      //Set them as defaults
      $default_value = simplifiedMailHandlerHelpers::queryForWhoForNodeNid($node->nid);
    } else {
      //Must just be a new node
      //Set the author as notified
      $default_value = $user->uid;
    }
    $staff = simplifiedMailHandlerHelpers::makeRoleOptionList(4);
    
    $form['sm_who_to_notify'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => $staff,
      '#default_value' => $default_value,
      '#title' => t('Who to notify. You are included but will only get emails if the comment is not made by you.'),
    );
  }
}
function simplified_mailhandler_node_view($node, $view_mode){

}

function simplified_mailhandler_node_load($nodes, $types) {

  if($types[0] == 'task' && count($nodes) == 1 && arg(2) != 'edit' && arg(0) != 'search') {
    $types = array('task');
    foreach($nodes as $node) {
      $viewWho = new SimplifiedMailHandlerNotifyNodeView($node);
      $viewWho->whoToNotifyEmails;
      $nodes[$node->nid]->sm_who_to_notify['#values'] = $viewWho;
      $nodes[$node->nid]->sm_who_to_notify['#markup'] = theme('item_list', array('title' =>'Who is Notified','items' => $viewWho->whoToNotifyEmails));
    }
  }
}


/**
 * Implements hook_node_insert().
 *
 * As a new node is being inserted into the database, we need to do our own
 * database inserts.
 */
function simplified_mailhandler_node_insert($node) {
  if ($node->type == 'task') {

		if(isset($node->sm_who_to_notify)) {
			$who = $node->sm_who_to_notify;
		} else {
			//Must be an empty/new node from email assign to all staff
			$who = simplifiedMailHandlerHelpers::getUidArrayOfRoles(4);
		}
		//Save
		$saveWho = new SimplifiedMailHandlerSaveSendRecord($node->nid, $node->type, $who, REQUEST_TIME);
		$saveWho->saveIt();
	}
  //Notify Each User 
  //notifyThePeople($subject, $entity_id, $who, $from, $type)
  //Who needs to be the email value array
  $who = simplifiedMailHandlerHelpers::whoToNotifyEmails($node->nid);
	//@todo reduce the args
	$title = $node->title;
  $notifyThePeople = simplifiedMailHandlerHelpers::notifyThePeople($title, $node->nid, $who, FROM, 'post');
}



function simplified_mailhandler_comment_insert($comment) {
	watchdog('Comment from the site', print_r($comment, 1));
	if($comment->node_type == 'comment_node_task') {

		$cid = $comment->cid;
		$parent = $comment->pid;
		$title =  $comment->subject;

		$node = node_load($comment->nid);
		//@TODO is this an ugly data structure
		if(isset($node->sm_who_to_notify['#values']->whoToNotifyUids)) {
			$who = $node->sm_who_to_notify['#values']->whoToNotifyUids;
		} else {
			//Must be an empty/new node from email assign to all staff
			$who = simplifiedMailHandlerHelpers::getUidArrayOfRoles(4);
		}
		$saveWho = new SimplifiedMailHandlerSaveSendRecord($cid, 'comment', $who, REQUEST_TIME);
		$saveWho->saveIt();


		$who = simplifiedMailHandlerHelpers::whoToNotifyEmails($node->nid);
		$notifyThePeople = simplifiedMailHandlerHelpers::notifyThePeople($title, $cid, $who, FROM, 'comment');
	}

}




/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, we need to remove all related records from our table,
 * including all revisions. For the delete operations we use node->nid.
 */
function simplified_mailhandler_node_delete($node) {
  // Notice that we're deleting even if the content type has no rating enabled.
  if ($node->type == 'task') {
    db_delete('simplified_mailhandler_message')
    ->condition('entity_id', $node->nid)
    ->execute();
  }  
}


function simplified_mailhandler_node_update($node) {
  if ($node->type == 'task') {
    db_delete('simplified_mailhandler_message')
      ->condition('entity_id', $node->nid)
      ->execute();
    $who = $node->sm_who_to_notify;
    db_insert('simplified_mailhandler_message')
    ->fields(array(
        'pid' => NULL,
        'entity_id' => $node->nid,
        'type' => $node->type,
        'who' => serialize($who),
        'time' => REQUEST_TIME,
    ))
    ->execute();     
  }
}


function  simplified_mailhandler_preprocess_node(&$variables){ 
  $variables['content']['sm_who_to_notify'][0]['#markup'] = $variables['sm_who_to_notify']['#markup'];
  $variables['content']['sm_who_to_notify']['#weight'] = 20;
}
